generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ผู้ใช้งาน
model User {
  id                String              @id @default(cuid())
  username          String              @unique
  password          String
  email             String?
  role              Role                @default(User)
  account           Account?
  student           Student?
  teacher           Teacher?
  sessions          Session[]
  verificationToken VerificationToken[]
  status            String?
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  updatedBy         String?
  createdBy         String?

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([identifier, token])
  @@map("verificationToken")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@map("session")
}

model Account {
  id            String    @id @default(cuid())
  userId        String?   @unique
  avatar        String? // avatar path
  title         String?
  firstName     String?
  lastName      String?
  idCard        String?
  birthDate     DateTime?
  bloodType     String?
  fatherName    String?
  fatherPhone   String?
  motherName    String?
  motherPhone   String?
  parentName    String?
  parentPhone   String?
  addressLine1  String?
  subdistrict   String?
  district      String?
  province      String?
  postcode      String?
  country       String?
  phone         String?
  refresh_token String?
  access_token  String?
  scope         String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  updatedBy     String?
  createdBy     String?

  @@unique([userId, id])
  @@map("accounts")
}

// นักเรียน นักศึกษา
model Student {
  id               String          @id @default(cuid())
  studentId        String?         @unique
  isGraduation     Boolean?
  graduationYear   Int?
  graduationDate   DateTime?
  studentStatus    String? // กำลังศึกษา, ออกก่อนกำหนด, จบการศึกษา,
  group            String?
  stutus           String?
  user             User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?         @unique
  classroom        Classroom?      @relation(fields: [classroomId], references: [id])
  classroomId      String?
  department       Department?     @relation(fields: [departmentId], references: [id])
  departmentId     String?
  program          Program?        @relation(fields: [programId], references: [id])
  programId        String?
  level            Level?          @relation(fields: [levelId], references: [id])
  levelId          String?
  levelClassroom   LevelClassroom? @relation(fields: [levelClassroomId], references: [id])
  levelClassroomId String?
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  updatedBy        String?
  createdBy        String?

  @@unique([userId, studentId])
  @@map("student")
}

// ครูผู้สอน ครูอาจารย์ ครูอาจารย์พิเศษ และบุคลากรอื่นๆ
model Teacher {
  id               String          @id @default(cuid())
  teacherId        String?         @unique
  jobTitle         String? // ตำแหน่ง
  academicStanding String? // วิทยฐานะ
  classroom        Classroom[] // ครูประจำชั้น
  rfId             String?
  program          Program?        @relation(fields: [programId], references: [id])
  programId        String? // สาขาวิชา
  user             User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String?         @unique
  department       Department?     @relation(fields: [departmentId], references: [id])
  departmentId     String?
  levelClassroom   LevelClassroom? @relation(fields: [levelClassroomId], references: [id])
  levelClassroomId String?
  status           String?
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  updatedBy        String?
  createdBy        String?

  @@unique([userId, teacherId])
  @@map("teacher")
}

// ระดับชั้นเรียนรายสาขาวิชา
// ปวช.1/1-ช่างก่อสร้าง
model Classroom {
  id             String           @id @default(cuid())
  classroomId    String?          @unique
  name           String?
  description    String?
  teacher        Teacher[]
  student        Student[]
  course         Course[]
  levelClassroom LevelClassroom[]
  level          Level?           @relation(fields: [levelId], references: [id])
  levelId        String?
  program        Program?         @relation(fields: [programId], references: [id])
  programId      String?
  status         String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  updatedBy      String?
  createdBy      String?

  @@map("classroom")
}

// ระดับชั้นเรียน
// ปวช.1/1
model LevelClassroom {
  id               String      @id @default(cuid())
  levelClassroomId String?     @unique
  name             String?
  description      String?
  status           String?
  student          Student[]
  teacher          Teacher[]
  classroom        Classroom[]
  program          Program?    @relation(fields: [programId], references: [id])
  programId        String?
  level            Level?      @relation(fields: [levelId], references: [id])
  levelId          String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  updatedBy        String?
  createdBy        String?

  @@map("levelClassroom")
}

// แผนกวิชา
model Department {
  id           String    @id @default(cuid())
  departmentId String?   @unique
  name         String?
  description  String?
  teacher      Teacher[]
  student      Student[]
  program      Program[]
  status       String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  updatedBy    String?
  createdBy    String?

  @@map("department")
}

// สาขาวิชา
model Program {
  id             String           @id @default(cuid())
  programId      String?          @unique
  name           String?
  description    String?
  student        Student[]
  course         Course[]
  teacher        Teacher[]
  levelClassroom LevelClassroom[]
  classroom      Classroom[]
  level          Level?           @relation(fields: [levelId], references: [id])
  levelId        String?
  department     Department?      @relation(fields: [departmentId], references: [id])
  departmentId   String?
  status         String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  updatedBy      String?
  createdBy      String?

  @@unique([programId, description])
  @@map("program")
}

// รายวิชา
model Course {
  id             String     @id @default(cuid())
  courseId       String?    @unique
  courseName     String?
  numberOfCredit Int? // จำนวนหน่วยกิต
  type           String? // รายวิชาพื้นฐาน, รายวิชาเพิ่มเติม, กิจกรรมพัฒนาผู้เรียน
  evaluation     String? // ประเมินผลรายภาคเรียน, ประเมินผลรายปี
  status         String?
  programId      String? // รหัสสาขาวิชา
  program        Program?   @relation(fields: [programId], references: [id])
  classrommId    String?
  classromm      Classroom? @relation(fields: [classrommId], references: [id])
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  updatedBy      String?
  createdBy      String?

  @@map("course")
}

// ระดับชั้น
// ปวช.
// ปวส.
model Level {
  id             String           @id @default(cuid())
  levelId        String?          @unique
  levelName      String?
  levelFullName  String?
  program        Program[]
  classRoom      Classroom[]
  student        Student[]
  levelClassroom LevelClassroom[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  updatedBy      String?
  createdBy      String?

  @@map("level")
}

enum Role {
  Admin
  User
  Student
  Teacher
  Parent
}
