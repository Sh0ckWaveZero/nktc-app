generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String    @id @default(cuid())
  userId        String?   @unique
  avatar        String? // avatar path
  title         String?
  firstName     String?
  lastName      String?
  titleEn       String?
  firstNameEn   String?
  lastNameEn    String?
  idCard        String?
  birthDate     DateTime?
  bloodType     String?
  fatherName    String?
  fatherPhone   String?
  motherName    String?
  motherPhone   String?
  parentName    String?
  parentPhone   String?
  addressLine1  String?
  subdistrict   String?
  district      String?
  province      String?
  postcode      String?
  country       String?
  phone         String?
  refresh_token String?
  access_token  String?
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String?
  session_state String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  updatedBy     String?
  createdBy     String?

  @@unique([userId, id])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ผู้ใช้งาน
model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  email     String?
  role      Role      @default(User)
  account   Account?
  sessions  Session[]
  student   Student?
  teacher   Teacher?
  status    String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  updatedBy String?
  createdBy String?

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// นักเรียน นักศึกษา
model Student {
  id             String      @id @default(cuid())
  studentId      String?     @unique
  isGraduation   Boolean?
  graduationYear Int?
  graduationDate DateTime?
  studentStatus  String? // กำลังศึกษา, ออกก่อนกำหนด, จบการศึกษา,
  group          String?
  stutus         String?
  userId         String?     @unique
  user           User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  classroomId    String?
  classroom      Classroom?  @relation(fields: [classroomId], references: [id])
  departmentId   String?
  department     Department? @relation(fields: [departmentId], references: [id])
  programId      String?
  program        Program?    @relation(fields: [programId], references: [id])
  levelId        String?
  level          Level?      @relation(fields: [levelId], references: [id])
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  updatedBy      String?
  createdBy      String?

  @@unique([userId, studentId])
  @@map("student")
}

// ครูผู้สอน ครูอาจารย์ ครูอาจารย์พิเศษ และบุคลากรอื่นๆ
model Teacher {
  id               String      @id @default(cuid())
  teacherId        String?     @unique
  classroomId      Classroom[] // ครูประจำชั้น
  jobTitle         String? // ตำแหน่ง
  academicStanding String? // วิทยฐานะ
  programId        String? // สาขาวิชา
  rfId             String?
  userId           String?     @unique
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  departmentId     String?
  department       Department? @relation(fields: [departmentId], references: [id])
  status           String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  updatedBy        String?
  createdBy        String?

  @@unique([userId, teacherId])
  @@map("teacher")
}

// กลุ่มเรียน
model Classroom {
  id          String    @id @default(cuid())
  classroomId String?   @unique
  name        String?
  description String?
  teacherId   Teacher[]
  student     Student[]
  course      Course[]
  levelId     String?
  level       Level?    @relation(fields: [levelId], references: [id])
  status      String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedBy   String?
  createdBy   String?

  @@map("classroom")
}

// แผนกวิชา
model Department {
  id           String    @id @default(cuid())
  departmentId String?   @unique
  name         String?
  description  String?
  teacher      Teacher[]
  student      Student[]
  program      Program[]
  status       String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  updatedBy    String?
  createdBy    String?

  @@map("department")
}

// สาขาวิชา
model Program {
  id           String      @id @default(cuid())
  programId    String?     @unique
  name         String?
  description  String?
  student      Student[]
  course       Course[]
  levelId      String?
  level        Level?      @relation(fields: [levelId], references: [id])
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  status       String?
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  updatedBy    String?
  createdBy    String?

  @@unique([programId, description])
  @@map("program")
}

// รายวิชา
model Course {
  id             String     @id @default(cuid())
  courseId       String?    @unique
  courseName     String?
  numberOfCredit Int? // จำนวนหน่วยกิต
  type           String? // รายวิชาพื้นฐาน, รายวิชาเพิ่มเติม, กิจกรรมพัฒนาผู้เรียน
  evaluation     String? // ประเมินผลรายภาคเรียน, ประเมินผลรายปี
  status         String?
  programId      String? // รหัสสาขาวิชา
  program        Program?   @relation(fields: [programId], references: [id])
  classrommId    String?
  classromm      Classroom? @relation(fields: [classrommId], references: [id])
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  updatedBy      String?
  createdBy      String?

  @@map("course")
}

// ระดับชั้น
model Level {
  id            String      @id @default(cuid())
  levelId       String?     @unique
  levelName     String?
  levelFullName String?
  program       Program[]
  classRoom     Classroom[]
  Student       Student[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  updatedBy     String?
  createdBy     String?

  @@map("level")
}

enum Role {
  Admin
  User
  Student
  Teacher
  Parent
}
