generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  student       Student?
  teacher       Teacher?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  updatedBy     String?
  createdBy     String?

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id           String      @id @default(cuid())
  userId       String      @unique
  studentId    String      @unique
  studentNo    Int         @unique
  classId      String
  departmentId String
  firstNameEn  String?
  lastNameEn   String?
  idCard       String?
  birthDate    DateTime?
  bloodType    String?
  fatherName   String?
  fatherPhone  String?
  motherName   String?
  motherPhone  String?
  parentName   String?
  parentPhone  String?
  addressLine1 String?
  subdistrict  String?
  district     String?
  province     String?
  postcode     String?
  country      String?
  email        String?
  phone        String?
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  class        Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  updatedBy    String?
  createdBy    String?

  @@map("student")
}

model Teacher {
  id               String    @id @default(cuid())
  userId           String    @unique
  teacherId        String    @unique
  classId          String?
  jobTitle         String?
  academicStanding String?
  departmentId     String
  rfId             String?
  idCard           String?
  birthDate        DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Class            Class?    @relation(fields: [classId], references: [id])
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  updatedBy        String?
  createdBy        String?

  @@map("teacher")
}

model Class {
  id          String    @id @default(cuid())
  name        String?
  description String?
  teacher     Teacher[]
  student     Student[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedBy   String?
  createdBy   String?

  @@map("class")
}

model Department {
  id          String    @id @default(cuid())
  name        String?
  description String?
  Student     Student[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  updatedBy   String?
  createdBy   String?

  @@map("department")
}

enum Role {
  ADMIN
  USER
  STUDENT
  TEACHER
  PARENT
}
